extends ./index.jade

block vars
	- var title = "FidAls | Внутряк блога";
	- var bodyClass = "blog-inner";

block append styles
	link(rel="stylesheet", href="css/blog.css")

block content
	.container
		.text-title-wrapper
			h2.text-title Блоги

		.row
			.col-lg-8
				.blogs-wrapper
					.blog-item
						h1.blog-inner-title
							| One API to rule all product data

						p.blog-item-text
							| Liip was approached by Migros, the largest retail company in Switzerland. Their challenge was that their product data is managed in several large enterprise systems and databases that are not suitable for real-time access.

						p.blog-item-text
							| Migros has various websites and a mobile application that all need to query data. Liip built the M-API, a Symfony application that gathers the data from the various systems, cleans it up and indexes it with Elasticsearch. This index can be queried in real time through a convenient REST API with JSON and XML output. The M-API handles several million requests per day and does well even during traffic peaks.

						p
							img(class="img-responsive" src="https://farm2.staticflickr.com/1495/23889552194_5261e17917_o.png")

						p.blog-item-text
							| Picture: The API documentation built with #[a(href="https://github.com/nelmio/NelmioApiDocBundle/blob/master/Resources/doc/index.md" target="_blank") NelmioApiDocBundle] and swagger.js

						h3.blog-inner-subtitle
							API Architecture

						p
							img(class="img-responsive" src="https://farm2.staticflickr.com/1475/24517747075_64bd72d56b_o.png")

						p.blog-item-text
							| This architecture is redundant and extremely scalable, thus making it possible to simply add more servers, whenever necessary.

						p.blog-item-text
							| The documents in Elasticsearch are large and contain a lot of nested data. We decided to de-normalize all product-related data into each product record to make the lookup faster. When any part of the product information changes, we rebuild the information and re-index that product. The API offers query parameters to control the amount of details desired by the client.

						p.blog-item-text
							| The Symfony application is built around domain model classes for the data. When indexing, the models are populated with data from the external systems and serialized into Elasticsearch. For querying, the models are restored from the Elasticsearch responses and then re-serialized in the requested format and with the requested amount of details. We use the JMS serializer because it can groupfields to control the level of detail and even allow us to support multiple versions of the API from the same data source.

						p.blog-item-text
							| There is, of course, some overhead involved with unserializing the Elasticsearch data and re-serializing it, but the flexibility we gain from this is worth the price. To improve the response times, we run HipHopVM, the alternate PHP implementation done by Facebook to serve the Symfony API. Varnish is configured to go to HHVM by default, falling back to a normal php-fpm + Nginx stack if the HHVM instance fails. We did tests with PHP 5.5 and HHVM that showed us massive performance gains and better scalability. Benchmarks for PHP 7 indicate that it was so improved that HHVM might no longer be necessary.

						p.blog-item-text
							| In front of the M-API, we run Varnish servers to cache results. We use the FOSHttpCacheBundle to manage caching headers and invalidate cached data as needed.

						p.blog-item-data.clearfix
							i(class="fa fa-calendar-check-o")
							span.blog-item-date 25.01.2016
							i(class="fa fa-commenting-o")
							span.blog-item-comments 1 Комментарий

						ul.blog-inner-tags
							li.blog-inner-tags-item
								| Теги:
							li.blog-inner-tags-item
								a(href="#") Back-End
								| ,
							li.blog-inner-tags-item
								a(href="#") API
								| ,
							li.blog-inner-tags-item
								a(href="#") Symfony
								| ,
							li.blog-inner-tags-item
								a(href="#") PHP
								| ,
							li.blog-inner-tags-item
								a(href="#") FOSHttpCacheBundle

						<!-- AddToAny BEGIN -->
						<div class="share-widget a2a_kit a2a_kit_size_32 a2a_default_style">
						<a class="a2a_button_facebook"></a>
						<a class="a2a_button_twitter"></a>
						<a class="a2a_button_vk"></a>
						<a class="a2a_button_google_plus"></a>
						<a class="a2a_button_telegram"></a>
						</div>
						<script src="//static.addtoany.com/menu/page.js"></script>
						<!-- AddToAny END -->

			.col-lg-4
				include _sidebar-right.jade

block append scripts
	//- script(src='js/pages/blog-inner.js')